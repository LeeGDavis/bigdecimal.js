package io.couch.gwtapp.client;

import com.google.gwt.core.client.JavaScriptObject;
import org.timepedia.exporter.client.Export;
import org.timepedia.exporter.client.NoExport;
import org.timepedia.exporter.client.Exportable;
import org.timepedia.exporter.client.ExportPackage;

@ExportPackage("j")
@Export
public class BigDecimal extends java.math.BigDecimal implements Exportable {
  // I think this constructor is needed for Javascript compatibility.
  public BigDecimal() {
    super("0");
  }

  <% %w[ double int long String ].each do |type| %>
    @NoExport
    public BigDecimal(<%= type %> source) { super(source); }
  <% end %>

  @NoExport
  public BigDecimal(java.math.BigDecimal source) {
    super(source.toString());
  }

  // A shortcut to quickly convert a string to a BigDecimal
  public static BigDecimal Create(InitParams params) {
    if(params.has("String"))
      return new BigDecimal(params.get("String"));
    else if(params.has("double"))
      return new BigDecimal(params.getNum("double"));
    else if(params.has("int"))
      return new BigDecimal(params.getNum("int"));
    else if(params.has("long"))
      return new BigDecimal(params.getNum("long"));

    // TODO: Maybe MathContext stuff?
    return null;
  }

  <%= wrap :BigDecimal, :abs %>
  <%= wrap :BigDecimal, :add, :BigDecimal %>
  <%= wrap :byte, :byteValueExact %>
  <%= wrap :int, :compareTo, :BigDecimal %>
  <%= wrap :BigDecimal, :divideToIntegralValue, :BigDecimal %>
  <%= wrap :double, :doubleValue %>
  <%= wrap :boolean, :equals, :Object %>
  <%= wrap :float, :floatValue %>
  <%= wrap :int, :hashCode %>
  <%= wrap :int, :intValue %>
  <%= wrap :int, :intValueExact %>
  <%# XXX: longValue, longValueExact cannot be returned, should be implemented in Javascript %>
  <%= wrap :BigDecimal, :max, :BigDecimal %>
  <%= wrap :BigDecimal, :min, :BigDecimal %>
  <%= wrap :BigDecimal, :movePointLeft, :int %>
  <%= wrap :BigDecimal, :movePointRight, :int %>
  <%= wrap :BigDecimal, :multiply, :BigDecimal %>
  <%= wrap :BigDecimal, :negate %>
  <%= wrap :BigDecimal, :plus %>
  <%= wrap :BigDecimal, :pow, :int %>
  <%= wrap :int, :precision %>
  <%= wrap :BigDecimal, :remainder, :BigDecimal %>
  <%= wrap :int, :scale %>
  <%= wrap :BigDecimal, :scaleByPowerOfTen, :int %>
  <%= wrap :short, :shortValueExact %>
  <%= wrap :int, :signum %>
  <%= wrap :BigDecimal, :stripTrailingZeros %>
  <%= wrap :BigDecimal, :subtract, :BigDecimal %>
  <%# TODO: toBigInteger, unscaledValue %>
  <%= wrap :String, :toEngineeringString %>
  <%= wrap :String, :toPlainString %>
  <%= wrap :String, :toString %>
  <%= wrap :BigDecimal, :ulp %>

  static BigDecimal valueOf(InitParams opts) {
    if(opts == null)
      return null;

    if(opts.has("double"))
      return new BigDecimal(opts.getDouble("double"));
    else if(opts.has("long")) {
      if(false && opts.has("scale"))
        //return new BigDecimal(opts.getLong("long"), opts.getInt("scale")); // TODO
        return null;
      else
        return new BigDecimal(opts.getLong("long"));
    }
    else
      return null;
  }

  <%#= wrap :BigDecimal, :setScale, :int %>
  public BigDecimal setScale(int newScale, InitParams opts) {
    java.math.BigDecimal result = (opts != null && opts.has("roundingMode"))
      ? super.setScale(newScale, opts.getInt("roundingMode"))
      : super.setScale(newScale);
    return new BigDecimal(result);
  }

  <%#= wrap :BigDecimal, :divide, :BigDecimal %>
  <%#= wrap :BigDecimal, :divide, :BigDecimal, :int %>
  public BigDecimal divide(BigDecimal x, InitParams opts) {
    java.math.BigDecimal result;

    if(opts == null)
      result = super.divide(x);
    else {
      if(!opts.has("roundingMode"))
        result = super.divide(x);
      else if(opts.has("scale"))
        result = super.divide(x, opts.getInt("scale"), opts.getInt("roundingMode"));
      else
        result = super.divide(x, opts.getInt("roundingMode"));
    }

    return new BigDecimal(result);
  }

  public static native void log(String x) /*-{ $wnd.console.log(x); }-*/;

  // Fields
  <% %w[ ROUND_CEILING ROUND_DOWN ROUND_FLOOR ROUND_HALF_DOWN ROUND_HALF_EVEN ROUND_HALF_UP ROUND_UNNECESSARY ROUND_UP ].each do |field| %>
    public static final int <%= field %> = java.math.BigDecimal.<%= field %>;
  <% end %>

  // TODO: Make these actual fields
  <% %w[ ONE TEN ZERO ].each do |field| %>
    public static final BigDecimal <%= field %>() { return new BigDecimal(java.math.BigDecimal.<%= field %>); }
  <% end %>
}
